/**
 * Minified by jsDelivr using Terser v5.7.1.
 * Original file: /gh/danchitnis/webgl-plot@master/dist/webglplot.umd.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
!function(t,i){"object"==typeof exports&&"undefined"!=typeof module?i(exports):"function"==typeof define&&define.amd?define(["exports"],i):i((t="undefined"!=typeof globalThis?globalThis:t||self).WebglPlotBundle={})}(this,(function(t){"use strict";class i{constructor(t,i,s,e){this.r=t,this.g=i,this.b=s,this.a=e}}class s{constructor(){this.scaleX=1,this.scaleY=1,this.offsetX=0,this.offsetY=0,this.loop=!1,this._vbuffer=0,this._coord=0,this.visible=!0,this.intensity=1,this.xy=new Float32Array([]),this.numPoints=0,this.color=new i(0,0,0,1),this.webglNumPoints=0}}t.ColorRGBA=i,t.WebglLine=class extends s{constructor(t,i){super(),this.currentIndex=0,this.webglNumPoints=i,this.numPoints=i,this.color=t,this.xy=new Float32Array(2*this.webglNumPoints)}setX(t,i){this.xy[2*t]=i}setY(t,i){this.xy[2*t+1]=i}getX(t){return this.xy[2*t]}getY(t){return this.xy[2*t+1]}lineSpaceX(t,i){for(let s=0;s<this.numPoints;s++)this.setX(s,t+i*s)}arrangeX(){this.lineSpaceX(-1,2/this.numPoints)}constY(t){for(let i=0;i<this.numPoints;i++)this.setY(i,t)}shiftAdd(t){const i=t.length;for(let t=0;t<this.numPoints-i;t++)this.setY(t,this.getY(t+i));for(let s=0;s<i;s++)this.setY(s+this.numPoints-i,t[s])}addArrayY(t){if(this.currentIndex+t.length<=this.numPoints)for(let i=0;i<t.length;i++)this.setY(this.currentIndex,t[i]),this.currentIndex++}replaceArrayY(t){if(t.length==this.numPoints)for(let i=0;i<this.numPoints;i++)this.setY(i,t[i])}},t.WebglPlot=class{constructor(t,i){this.debug=!1,this.addLine=this.addDataLine,null==i?this.webgl=t.getContext("webgl",{antialias:!0,transparent:!1}):(this.webgl=t.getContext("webgl",{antialias:i.antialias,transparent:i.transparent,desynchronized:i.deSync,powerPerformance:i.powerPerformance,preserveDrawing:i.preserveDrawing}),this.debug=null!=i.debug&&i.debug),this.log("canvas type is: "+t.constructor.name),this.log(`[webgl-plot]:width=${t.width}, height=${t.height}`),this._linesData=[],this._linesAux=[],this._surfaces=[],this.gScaleX=1,this.gScaleY=1,this.gXYratio=1,this.gOffsetX=0,this.gOffsetY=0,this.gLog10X=!1,this.gLog10Y=!1,this.webgl.clear(this.webgl.COLOR_BUFFER_BIT),this.webgl.viewport(0,0,t.width,t.height),this.progThinLine=this.webgl.createProgram(),this.initThinLineProgram(),this.webgl.enable(this.webgl.BLEND),this.webgl.blendFunc(this.webgl.SRC_ALPHA,this.webgl.ONE_MINUS_SRC_ALPHA)}get linesData(){return this._linesData}get linesAux(){return this._linesAux}get surfaces(){return this._surfaces}drawLines(t){const i=this.webgl;t.forEach((t=>{if(t.visible){i.useProgram(this.progThinLine);const s=i.getUniformLocation(this.progThinLine,"uscale");i.uniformMatrix2fv(s,!1,new Float32Array([t.scaleX*this.gScaleX*(this.gLog10X?1/Math.log(10):1),0,0,t.scaleY*this.gScaleY*this.gXYratio*(this.gLog10Y?1/Math.log(10):1)]));const e=i.getUniformLocation(this.progThinLine,"uoffset");i.uniform2fv(e,new Float32Array([t.offsetX+this.gOffsetX,t.offsetY+this.gOffsetY]));const o=i.getUniformLocation(this.progThinLine,"is_log");i.uniform2iv(o,new Int32Array([this.gLog10X?1:0,this.gLog10Y?1:0]));const n=i.getUniformLocation(this.progThinLine,"uColor");i.uniform4fv(n,[t.color.r,t.color.g,t.color.b,t.color.a]),i.bufferData(i.ARRAY_BUFFER,t.xy,i.STREAM_DRAW),i.drawArrays(t.loop?i.LINE_LOOP:i.LINE_STRIP,0,t.webglNumPoints)}}))}drawSurfaces(t){const i=this.webgl;t.forEach((t=>{if(t.visible){i.useProgram(this.progThinLine);const s=i.getUniformLocation(this.progThinLine,"uscale");i.uniformMatrix2fv(s,!1,new Float32Array([t.scaleX*this.gScaleX*(this.gLog10X?1/Math.log(10):1),0,0,t.scaleY*this.gScaleY*this.gXYratio*(this.gLog10Y?1/Math.log(10):1)]));const e=i.getUniformLocation(this.progThinLine,"uoffset");i.uniform2fv(e,new Float32Array([t.offsetX+this.gOffsetX,t.offsetY+this.gOffsetY]));const o=i.getUniformLocation(this.progThinLine,"is_log");i.uniform2iv(o,new Int32Array([this.gLog10X?1:0,this.gLog10Y?1:0]));const n=i.getUniformLocation(this.progThinLine,"uColor");i.uniform4fv(n,[t.color.r,t.color.g,t.color.b,t.color.a]),i.bufferData(i.ARRAY_BUFFER,t.xy,i.STREAM_DRAW),i.drawArrays(i.TRIANGLE_STRIP,0,t.webglNumPoints)}}))}update(){this.clear(),this.drawLines(this.linesData),this.drawLines(this.linesAux),this.drawSurfaces(this.surfaces)}draw(){this.drawLines(this.linesData),this.drawLines(this.linesAux),this.drawSurfaces(this.surfaces)}clear(){this.webgl.clear(this.webgl.COLOR_BUFFER_BIT)}_addLine(t){t._vbuffer=this.webgl.createBuffer(),this.webgl.bindBuffer(this.webgl.ARRAY_BUFFER,t._vbuffer),this.webgl.bufferData(this.webgl.ARRAY_BUFFER,t.xy,this.webgl.STREAM_DRAW),this.webgl.bindBuffer(this.webgl.ARRAY_BUFFER,t._vbuffer),t._coord=this.webgl.getAttribLocation(this.progThinLine,"coordinates"),this.webgl.vertexAttribPointer(t._coord,2,this.webgl.FLOAT,!1,0,0),this.webgl.enableVertexAttribArray(t._coord)}addDataLine(t){this._addLine(t),this.linesData.push(t)}addAuxLine(t){this._addLine(t),this.linesAux.push(t)}addSurface(t){this._addLine(t),this.surfaces.push(t)}initThinLineProgram(){const t=this.webgl.createShader(this.webgl.VERTEX_SHADER);this.webgl.shaderSource(t,"\n      attribute vec2 coordinates;\n      uniform mat2 uscale;\n      uniform vec2 uoffset;\n      uniform ivec2 is_log;\n\n      void main(void) {\n         float x = (is_log[0]==1) ? log(coordinates.x) : coordinates.x;\n         float y = (is_log[1]==1) ? log(coordinates.y) : coordinates.y;\n         vec2 line = vec2(x, y);\n         gl_Position = vec4(uscale*line + uoffset, 0.0, 1.0);\n      }"),this.webgl.compileShader(t);const i=this.webgl.createShader(this.webgl.FRAGMENT_SHADER);this.webgl.shaderSource(i,"\n         precision mediump float;\n         uniform highp vec4 uColor;\n         void main(void) {\n            gl_FragColor =  uColor;\n         }"),this.webgl.compileShader(i),this.progThinLine=this.webgl.createProgram(),this.webgl.attachShader(this.progThinLine,t),this.webgl.attachShader(this.progThinLine,i),this.webgl.linkProgram(this.progThinLine)}popDataLine(){this.linesData.pop()}removeAllLines(){this._linesData=[],this._linesAux=[]}removeDataLines(){this._linesData=[]}removeAuxLines(){this._linesAux=[]}viewport(t,i,s,e){this.webgl.viewport(t,i,s,e)}log(t){this.debug&&console.log("[webgl-plot]:"+t)}},t.WebglPolar=class extends s{constructor(t,i){super(),this.webglNumPoints=i,this.numPoints=i,this.color=t,this.intenisty=1,this.xy=new Float32Array(2*this.webglNumPoints),this._vbuffer=0,this._coord=0,this.visible=!0,this.offsetTheta=0}setRtheta(t,i,s){const e=s*Math.cos(2*Math.PI*(i+this.offsetTheta)/360),o=s*Math.sin(2*Math.PI*(i+this.offsetTheta)/360);this.setX(t,e),this.setY(t,o)}getTheta(t){return 0}getR(t){return Math.sqrt(Math.pow(this.getX(t),2)+Math.pow(this.getY(t),2))}setX(t,i){this.xy[2*t]=i}setY(t,i){this.xy[2*t+1]=i}getX(t){return this.xy[2*t]}getY(t){return this.xy[2*t+1]}},t.WebglSquare=class extends s{constructor(t){super(),this.webglNumPoints=4,this.numPoints=4,this.color=t,this.xy=new Float32Array(2*this.webglNumPoints)}setSquare(t,i,s,e){this.xy=new Float32Array([t,i,t,e,s,i,s,e])}},t.WebglStep=class extends s{constructor(t,i){super(),this.webglNumPoints=2*i,this.numPoints=i,this.color=t,this.xy=new Float32Array(2*this.webglNumPoints)}setY(t,i){this.xy[4*t+1]=i,this.xy[4*t+3]=i}getX(t){return this.xy[4*t]}getY(t){return this.xy[4*t+1]}lineSpaceX(t,i){for(let s=0;s<this.numPoints;s++)this.xy[4*s]=t+s*i,this.xy[4*s+2]=t+(s*i+i)}constY(t){for(let i=0;i<this.numPoints;i++)this.setY(i,t)}shiftAdd(t){const i=t.length;for(let t=0;t<this.numPoints-i;t++)this.setY(t,this.getY(t+i));for(let s=0;s<i;s++)this.setY(s+this.numPoints-i,t[s])}},Object.defineProperty(t,"__esModule",{value:!0})}));
//# sourceMappingURL=/sm/6c757b1c5dfbf961422f87d96a6ee69019f858a6ccefd9847851ab900d69c223.map